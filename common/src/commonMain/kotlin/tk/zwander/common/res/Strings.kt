package tk.zwander.common.res

import tk.zwander.common.GradleConfig

object Strings {
    const val badReturnStatus = "Bad return status: %d"
    const val noBinaryFile = "No binary file found for %s, %s! Please try a different CSC."
    const val versionMismatch = "You requested %s but Samsung is attempting to serve %s instead. Aborting!"
    const val selectEncrypted = "Please select an encrypted firmware file ending in enc2 or enc4."
    const val crcCheckFailed = "CRC check failed. Please delete the file and download again."
    const val md5CheckFailed = "MD5 check failed. Please delete the file and download again."
    const val firmwareCheckError = "Error checking for firmware. Make sure the model and region are correct.\nMore info: %s\n\n%s"
    const val manualWarning = "Warning! Samsung may not supply the requested firmware!"
    val manualWarningDetails = "For most devices, Samsung will only supply the latest firmware. Even if you request a different version, Samsung's servers will return the latest firmware file. To avoid potentially flashing the wrong firmware, ${GradleConfig.appName} will check to see if Samsung is supplying the requested firmware before attempting to download. If the requested and served versions do not match, ${GradleConfig.appName} will abort the download. For more information on this, check out "
    const val manualWarningDetails2 = "this issue"
    const val manualWarningDetails3 = " on GitHub."
    const val historyError = "Unable to retrieve firmware history. Make sure the model and region are correct."
    const val historyErrorFormat = "$historyError\nError: %s"

    const val decrypting = "Decrypting"
    const val done = "Done"
    const val decrypt = "Decrypt"
    const val decryptFirmware = "Decrypt Firmware"
    const val openFile = "Open File"
    const val openFileDesc = "Open File to Decrypt"
    const val cancel = "Cancel"
    const val file = "File"
    const val downloading = "Downloading"
    const val error = "Error"
    const val checkingCRC = "Checking CRC"
    const val checkingMD5 = "Checking MD5"
    const val download = "Download"
    const val downloadFirmware = "Download Firmware"
    const val checkForUpdates = "Check for Updates"
    const val checkForUpdatesDesc = "Check for Firmware Updates"
    const val manual = "Manual"
    const val moreInfo = "More Info"
    const val ok = "OK"
    const val osVersion = "OS Version: %s"
    const val changelog = "Changelog"
    const val source = "Source: "
    const val odinRom = "OdinRom"
    const val checkHistory = "Check History"
    const val security = "Security: %s"
    const val release = "Release: %s"
    const val settings = "Settings"
    const val patreon = "Patreon"
    const val twitter = "Twitter"
    const val github = "GitHub"
    const val supporters = "Supporters"
    const val zacharyWander = "Zachary Wander"
    const val basedOn = "Based on "
    const val samloader = "Samloader"
    const val version = "v%s"
    const val android = "Android %s"
    const val buildDate = "Build Date: %s"
    const val firmware = "Firmware"
    const val modelHint = "Model (e.g. SM-N986U1)"
    const val regionHint = "Region (e.g. XAA)"
    const val firmwareHint = "Firmware (PDA/CSC/CP/AP)"
    const val patreonSupporters = "Patreon Supporters"
    const val mib = "%s / %s MiB"
    const val mibs = "MiB/s"
    const val kibs = "KiB/s"
    const val percent = "%s%%"
    const val useNativeFilePicker = "Use native file picker"
    const val downloader = "Downloader"
    const val decrypter = "Decrypter"
    const val history = "History"
    const val retrieve = "Retrieve"
    const val canceled = "Canceled"
    const val statusFormat = "Status: %s"
}
